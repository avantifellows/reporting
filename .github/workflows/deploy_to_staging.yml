# This workflow will update the code for the staging environment

on:
  pull_request:
  push:
    branches: ["main"]
  workflow_dispatch:

name: Deploy to staging

jobs:
  build_and_deploy:
    name: Deploy
    environment:
      name: Staging

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Set up SAM
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Download WeasyPrint Layer
        run: |
          mkdir -p layers
          echo "Downloading WeasyPrint layer from GitHub releases..."
          curl -L -o layers/weasyprint-layer.zip \
            https://github.com/kotify/cloud-print-utils/releases/download/weasyprint-65.1/weasyprint-layer-python3.9-x86_64.zip
          ls -la layers/

      - name: Publish WeasyPrint Layer
        id: publish-layer
        run: |
          # Check if WeasyPrint layer already exists
          LAYER_NAME="WeasyPrintLayer"
          LAYER_VERSION=$(aws lambda list-layer-versions --layer-name $LAYER_NAME --query 'LayerVersions[0].LayerVersionArn' --output text 2>/dev/null || echo "")

          if [ -z "$LAYER_VERSION" ] || [ "$LAYER_VERSION" == "None" ]; then
            echo "Publishing WeasyPrint layer..."
            LAYER_VERSION=$(aws lambda publish-layer-version \
              --layer-name $LAYER_NAME \
              --zip-file fileb://layers/weasyprint-layer.zip \
              --compatible-runtimes python3.9 \
              --compatible-architectures x86_64 \
              --query 'LayerVersionArn' \
              --output text)
          fi

          echo "WEASYPRINT_LAYER_ARN=$LAYER_VERSION" >> $GITHUB_ENV
          echo "WeasyPrint Layer ARN: $LAYER_VERSION"

      - name: Verify dependencies file
        run: |
          echo "Checking requirements.txt file location and content:"
          ls -la
          ls -la app/
          echo "Content of requirements.txt:"
          cat requirements.txt
          echo "Copying requirements.txt to app directory if needed:"
          cp requirements.txt app/ || true

      - name: Clean SAM build cache
        run: |
          rm -rf .aws-sam || true
          sam --version

      - name: Create build exclusions
        run: |
          mkdir -p .aws-sam
          echo '[function_build_definitions]' > .aws-sam/build.toml
          echo '[function_build_definitions.Function]' >> .aws-sam/build.toml
          echo 'exclude_dir = ["layers", "tests", "__pycache__", ".pytest_cache", ".venv", "venv", "env", ".env"]' >> .aws-sam/build.toml
          echo 'exclude_glob = ["*.zip", "*.pyc", "*.pyo", "*.so", "*.dist-info", "*.egg-info"]' >> .aws-sam/build.toml
          echo "Created SAM build exclusions file:"
          cat .aws-sam/build.toml

      - name: Build with SAM
        run: sam build --use-container -t templates/staging.yaml --debug

      - name: Check package size
        run: |
          echo "Checking package size..."
          find .aws-sam -type f -name "*.zip" -exec ls -lh {} \;
          echo "Directory sizes:"
          du -sh .aws-sam/*

      - name: Deploy
        env:
          DYNAMODB_URL: ${{ secrets.DYNAMODB_URL }}
          DYNAMODB_REGION: ${{ secrets.DYNAMODB_REGION }}
          DYNAMODB_ACCESS_KEY: ${{ secrets.DYNAMODB_ACCESS_KEY }}
          DYNAMODB_SECRET_KEY: ${{ secrets.DYNAMODB_SECRET_KEY }}
          FIRESTORE_CREDENTIALS: ${{ secrets.FIRESTORE_CREDENTIALS }}
          MONGO_AUTH_CREDENTIALS: ${{ secrets.MONGO_AUTH_CREDENTIALS }}
          BQ_CREDENTIALS_SECRET_NAME: ${{ secrets.BQ_CREDENTIALS_SECRET_NAME }}
        run: >
           sam deploy
           --stack-name ReportingStaging
           --s3-bucket reporting-engine-staging
           --no-confirm-changeset
           --no-fail-on-empty-changeset
           --region ap-south-1
           --capabilities CAPABILITY_IAM
           --parameter-overrides
           DynamodbUrl=$DYNAMODB_URL
           DynamodbRegion=$DYNAMODB_REGION
           DynamodbAccessKey=$DYNAMODB_ACCESS_KEY
           DynamodbSecretKey=$DYNAMODB_SECRET_KEY
           FirestoreCredentials=$FIRESTORE_CREDENTIALS
           MongoAuthCredentials=$MONGO_AUTH_CREDENTIALS
           BqCredentialsSecretName=$BQ_CREDENTIALS_SECRET_NAME
           WeasyPrintLayerArn=$WEASYPRINT_LAYER_ARN
